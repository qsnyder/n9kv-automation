---
#
# Initial testing of Ansible automation on NXOS9000v in VIRL
# Demonstration of multihost playbook leveraging variables at both the host and group level, as well as using Spark for chat-ops
# notifications.  Spark token is encrypted in a Vault file, protected by a password.
# Uses a "pause" function to ensure that OSPF converges prior to calling the conditional reversion task
#
# Author: Quinn Snyder, Systems Engineer | Enterprise Southwest .:|:.:|:. Cisco Systems
# Date: 2018-02-26
# Version: 0.1a
#
- name: Demonstration of automation of Nexus 9000v devices running in VIRL using Ansible
  hosts: all
  connection: local
  gather_facts: no

  tasks:

    - name: Decrypting the Vault file
      include_vars: "./vault.yml"

    - name: Enable the OSPF feature on each switch
      nxos_feature:
        feature: ospf
        state: enabled
#        provider: "{{ nxapi }}"

    - name: Configure interfaces to be in "UP" state
      with_items: "{{ interface_info }}"
      nxos_interface:
        description: 'Configured by Ansible'
        interface: "{{ item.int_name }}"
        admin_state: up
#        provider: "{{ nxapi }}"

    - name: Configure IP addresses on interfaces
      nxos_ip_interface:
        interface: "{{ item.int_name }}"
        version: v4
        state: present
        addr: "{{ item.ip }}"
        mask: "{{ item.mask }}"
#        provider: "{{ nxapi }}"
      with_items: "{{ interface_info }}"

    - name: Enable OSPF process on each switch
      nxos_ospf:
        ospf: "{{ ospf_process }}"
        state: present
#        provider: "{{ nxapi }}"

    - name: Configure OSPF on interfaces
      nxos_interface_ospf:
        interface: "{{ item.int_name }}"
        ospf: "{{ ospf_process }}"
        area: "{{ ospf_area }}"
        cost: "{{ ospf_cost }}"
#        provider: "{{ nxapi }}"
      with_items: "{{ interface_info }}"

    - name: Pause while OSPF converges
      pause:
        seconds: 45

    - name: Make sure peer loopback0 is seen in routing table for OSPF
      nxos_command:
        commands: show ip route ospf
        wait_for: result[0] contains "{{ peer_loop }}"
      register: result
      ignore_errors: true

    - name: Revert if OSPF routes not found
      import_role:
        name: revert
      when: result|failed

    - name: Send message indicating switches have been configured
      cisco_spark:
        recipient_type: toPersonEmail
        recipient_id: "{{ person_email }}"
        message_type: markdown
        personal_token: "{{ token }}"
        message: "**{{ inventory_hostname }} has been configured.  {{ peer_loop }} is seen in the OSPF routing table.**"
      when: result|succeeded
